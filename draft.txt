import { useState, useEffect } from "react";
import { ascey_backend } from "declarations/ascey_backend";
import { Principal } from "@dfinity/principal"; // Import Principal
//import { AuthClient } from "@dfinity/auth-client";
import MyNavbar from "./Navbar";

import './index.css';
function App() {
  const [tokenName, setTokenName] = useState("");
  const [logoUrl, setLogoUrl] = useState("");
  const [balance, setBalance] = useState(0n); // Keep balance as BigInt
  const [transactions, setTransactions] = useState([]); // Initialize as empty array
  const [accountTransactions, setAccountTransactions] = useState([]);

  const principalId = "be2us-64aaa-aaaaa-qaabq-cai";

  // useEffect(() => {
  //   async function authenticateUser() {
  //     const authClient = await AuthClient.create();

  //     if (await authClient.isAuthenticated()) {
  //       const identity = authClient.getIdentity();
  //       const principal = identity.getPrincipal().toText();
  //       console.log("Authenticated user principal:", principal);
  //     } else {
  //       await authClient.login({
  //         identityProvider: "https://identity.ic0.app/#authorize",
  //         onSuccess: () => {
  //           window.location.reload(); // Reload the page to get authenticated state
  //         }
  //       });
  //     }
  //   }
  //   authenticateUser();
  // }, []);

  // Fetch token details (name and logo) and user balance on load

  async function fetchData() {
    try {
      // Fetch token name
      const name = await ascey_backend.get_token_name();
      setTokenName(name);

      // Fetch logo URL
      const logo = await ascey_backend.get_logo_url();
      setLogoUrl(logo);

      // Fetch user balance (replace <YourPrincipalHere> with actual principal)
      //be2us-64aaa-aaaaa-qaabq-cai nour's principal
      //bd3sg-teaaa-aaaaa-qaaba-cai  j principal
      const balanceResult = await ascey_backend.check_balance({
        owner: Principal.fromText("be2us-64aaa-aaaaa-qaabq-cai"),
        subaccount: [],
      });
      setBalance(balanceResult);

      // Fetch latest transactions
      const txResponse = await ascey_backend.get_transactions(0, 50); // Adjust length as needed
      if (txResponse?.Ok?.transactions) {
        setTransactions(txResponse.Ok.transactions); // Correctly access transactions
        //console.log(txResponse.Ok.transactions);
      } else {
        console.error("No transactions in response:", txResponse);
      }

      // Fetch account transactions
      const accountTransactionsArgs = {
        max_results: 10n,
        start: [], // Empty array for None
        account: {
          owner: Principal.fromText(principalId.trim()),
          subaccount: [], // Empty array for None
        },
      };

      // Corrected argument order
      const accountTxResponse = await ascey_backend.get_account_transactions(
        accountTransactionsArgs.account,
        accountTransactionsArgs.start,
        accountTransactionsArgs.max_results
      );

      if (accountTxResponse?.Ok?.transactions) {
        setAccountTransactions(accountTxResponse.Ok.transactions);
      } else {
        console.error(
          "Error fetching account transactions:",
          accountTxResponse.Err
        );
      }
    } catch (error) {
      console.error("Error fetching data: ", error);
    }
  }

  useEffect(() => {
    fetchData();
    // console.log(transactions)
  }, []);

  return (

    <div className="min-h-screen bg-gray-100">
      <MyNavbar/>
    <main
      style={{
        height: "100%",
        minHeight: "100vh",
        backgroundColor: "#001f3f", // Dark blue background
        color: "white", // White text
      }}
    >
      {/* <header>
        <img src={logoUrl} alt={${tokenName} Logo} width="100" />
        <h1>{tokenName} - Token Dashboard</h1>
      </header> */}

      <section>
        <h2>Your Balance</h2>
        <p>
          {balance.toString()} {tokenName}
        </p>{" "}
        {/* Convert BigInt to string */}
      </section>

    
      <section>
        <h2>Account Transaction History</h2>
        <ul>
          {accountTransactions.length > 0 ? (
            accountTransactions.map((tx, index) => {
              console.log("Transaction data:", tx);

              const { transaction } = tx;
              const { kind, timestamp } = transaction;

              let amount = "N/A";
              let fromOwner = "N/A";
              let toOwner = "N/A";

              if (transaction.transfer && transaction.transfer.length > 0) {
                const transfer = transaction.transfer[0];
                amount = transfer.amount.toString();
                fromOwner = transfer.from.owner.toText();
                toOwner = transfer.to.owner.toText();
              } else if (transaction.mint && transaction.mint.length > 0) {
                const mint = transaction.mint[0];
                amount = mint.amount.toString();
                toOwner = mint.to.owner.toText();
              }

              return (
                <li key={index}>
                  <p>Transaction ID: {tx.id.toString()}</p>
                  <p>Type: {kind || "N/A"}</p>
                  <p>Amount: {amount}</p>
                  <p>
                    Timestamp:{" "}
                    {timestamp
                      ? new Date(
                          Number(timestamp / 1_000_000n)
                        ).toLocaleString()
                      : "N/A"}
                  </p>
                  <p>From: {fromOwner}</p>
                  <p>To: {toOwner}</p>
                </li>
              );
            })
          ) : (
            <p>No account transactions found.</p>
          )}
        </ul>
      </section>

      <section>
        <h2>Transfer Tokens</h2>
        <form
          onSubmit={async (event) => {
            event.preventDefault();

            try {
              // Retrieve and validate the Principal ID
              const toAccount = event.target.elements.to.value.trim();
              const amount = BigInt(event.target.elements.amount.value);

              if (!toAccount || amount <= 0n) {
                alert("Please provide valid inputs");
                return;
              }

              // Validate Principal ID format
              let principal;
              try {
                principal = Principal.fromText(toAccount);
              } catch (err) {
                alert(
                  "Invalid Principal ID format. Please provide a valid Principal ID."
                );
                return;
              }

              // Call the backend transfer function
              const transferResult = await ascey_backend.transfer({
                amount,
                to_account: {
                  owner: principal,
                  subaccount: [],
                },
              });

              // Check if the transfer was successful
              if ("Ok" in transferResult) {
                alert("Transfer successful: Block Index " + transferResult.Ok);
                fetchData();
              } else {
                // Handle the error case
                console.error("Transfer failed: ", transferResult.Err);
                alert("Transfer failed: " + transferResult.Err);
              }
            } catch (error) {
              console.error("Transfer failed: ", error);
              alert("Transfer failed: " + error.message);
            }
          }}
        >
          <label>
            To Account (Principal ID):
            <input
              type="text"
              name="to"
              placeholder="Enter recipient's principal"
              required
            />
          </label>
          <label>
            Amount:
            <input
              type="number"
              name="amount"
              placeholder="Amount to transfer"
              required
            />
          </label>
          <button type="submit">Send</button>
        </form>
      </section>
    </main>
    </div>
  );
}
